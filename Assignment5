{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "074b0fc6-26d1-44a6-81fd-1588ad2ffbde",
   "metadata": {},
   "source": [
    "Question1 ->  Which keyword is used to create a function? Create a function to return a list of odd numbers in the\n",
    "              range of 1 to 25.\n",
    "              \n",
    "Solution  ->  The class keyword is used to define new user-define class in Python. The def is used to define user-defined function. And the               return keyword is used to go back from a function and send a value to the invoker function. \n",
    "\n",
    "Create a function to return a list of odd numbers in the  range of 1 to 25?\n",
    "\n",
    "def odd_numbers(n):\n",
    "\treturn [x for x in range(0, n+1) if  x%2 != 0]\n",
    "odd_numbers(20)\n",
    "\n",
    "Output ->\n",
    "[1,3,5,7,9,11,13,15,17,19]\n",
    "\n",
    "\n",
    "Question2 ->  Why *args and **kwargs is used in some functions? Create a function each for *args and **kwargs\n",
    "              to demonstrate their use.\n",
    "      \n",
    "Solution  ->  Creating functions that accept *args and **kwargs are best used in situations where you expect that the number of inputs                     within the argument list will remain relatively small. The use of *args and **kwargs is primarily to provide readability and                 convenience, but should be done with care.\n",
    "\n",
    "Example of (*args) ->\n",
    "\n",
    "def test(*args):\n",
    "    return args\n",
    "test(1,2,3,4,5,6,7,8,9)\n",
    "\n",
    "\n",
    "\n",
    "Example of (*kwargs) ->\n",
    "\n",
    "def test1(**kwargs):\n",
    "    return kwargs\n",
    "test1(a = \"Aditya\", b = \"Rajput\", c = [1,2,3,4,5])\n",
    "\n",
    "\n",
    "Question3 ->   What is an iterator in python? Name the method used to initialise the iterator object and the method\n",
    "               used for iteration. Use these methods to print the first five elements of the given list [2, 4, 6, 8, 10, 12, 14,\n",
    "               16, 18, 20].\n",
    "               \n",
    "Solution  ->   Iterator in Python is an object that is used to iterate over iterable objects like lists, tuples, dicts, and sets. The                      iterator object is initialized using the iter() method. It uses the next() method for iteration.\n",
    "\n",
    "(1)__iter__(): The iter() method is called for the initialization of an iterator. This returns an iterator object\n",
    "(2)__next__(): The next method returns the next value for the iterable. When we use a for loop to traverse any iterable object, internally                  it uses the iter() method to get an iterator object, which further uses the next() method to iterate over. This method raises                a StopIteration to signal the end of the iteration.              \n",
    "\n",
    "\n",
    "import itertools\n",
    "\n",
    "n = 5\n",
    "list = [2, 4, 6, 8, 10, 12, 14,16, 18, 20]\n",
    "for item in itertools.islice(list, n):\n",
    "    print(item)\n",
    "    \n",
    "Output -> \n",
    "[2,4,6,8,10]\n",
    "\n",
    "\n",
    "Question4 ->   What is a generator function in python? Why yield keyword is used? Give an example of a generator function.\n",
    "\n",
    "Solution  ->   Prerequisites: Yield Keyword and Iterators There are two terms involved when we discuss generators. Generator-Function: A                    generator-function is defined like a normal function, but whenever it needs to generate a value, it does so with the yield                  keyword rather than return. If the body of a def contains yield, the function automatically becomes a generator function.\n",
    "\n",
    "The yield keyword converts the expression given into a generator function that gives back a generator object. To get the values of the object, it has to be iterated to read the values given to the yield. Example: Yield Method Here is a simple example of yield.\n",
    "\n",
    "Example  ->\n",
    "\n",
    "def count(n):\n",
    "    for i in range(0, n+1):\n",
    "        yield i      \n",
    "gen_obj = count(10) \n",
    "print(gen_obj)       \n",
    "print(list(gen_obj))\n",
    "\n",
    "\n",
    "Question5 ->   Write a python program to print the first 10 Fibonacci numbers using a while loop. \n",
    "\n",
    "Solution  ->\n",
    "number = 10\n",
    "\n",
    "a,b = 0,1\n",
    "i = 0\n",
    "while i<number:\n",
    "    print(a)\n",
    "    c=a+b\n",
    "    a=b\n",
    "    b=c\n",
    "    i=i+1\n",
    "    \n",
    "    \n",
    "Question6 ->  Write a List Comprehension to iterate through the given string: ‘pwskills’.\n",
    "              Expected output: ['p', 'w', 's', 'k', 'i', 'l', 'l', 's']   \n",
    "              \n",
    "Solution  ->   \n",
    "string = []\n",
    "\n",
    "for letter in 'pwskills':\n",
    "    string.append(letter)\n",
    "\n",
    "print(string)\n",
    "\n",
    "\n",
    "Question7 ->  Write a python program to check whether a given number is Palindrome or not using a while loop.\n",
    "\n",
    "Solution  -> \n",
    "\n",
    "num=11911\n",
    "temp=num\n",
    "rev=0\n",
    "while(num>0):\n",
    "    dig=num%10\n",
    "    rev=rev*10+dig\n",
    "    num=num//10\n",
    "if(temp==rev):\n",
    "    print(\"The number is palindrome!\")\n",
    "else:\n",
    "    print(\"Not a palindrome!\")\n",
    "    \n",
    "    \n",
    "Question8 ->  Write a code to print odd numbers from 1 to 100 using list comprehension.\n",
    "\n",
    "Solution  ->  [i for i in range(1,100) if i %2 != 0]\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
